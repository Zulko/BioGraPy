.. _tutorial:

========
TUTORIAL
========



to be completed...

===========
Basic usage
===========

Initialize panel

::

	panel=Panel(fig_width=900,)
	
Create a track
::

	test_track = tracks.BaseTrack(name = 'test', sort_by = None)
	
Create a feature
::

	feat1=features.Simple(name = 'feat1', start = 100, end = 356,  )
	
Add a features to a track
::

	test_track.append(feat1)
	
::

	test_track.extend([feat1, feat2, feat3])
	
or directly:
::

	test_track = tracks.BaseTrack(features.Simple(name = 'feat1', start = 100, end = 356, ),
                                  features.Simple(name = 'feat2', start = 30, end = 856, ),
                                  features.Simple(name = 'feat3', start = 400, end = 700, ),
                                  sort_by = 'None',)
                                  
Add a track to the panel:
::
	
	panel.add_track(test_track)
	
	
Save image. This supports all format supported by matplotlib including:

* png
* jpeg
* pdf
* svg

::

	panel.save('test_image.png')
	
Complete basic example:
::

    from biograpy import Panel, tracks, features
    panel=Panel(fig_width=900, padding = 25)#initialize a drawer, and add some padding
    test_track = tracks.BaseTrack(features.Simple(name = 'feat1', start = 100, end = 356, ),
                                  features.Simple(name = 'feat2', start = 30, end = 856, ),
                                  features.Simple(name = 'feat3', start = 400, end = 700, ),
                                  sort_by = 'None',)
    panel.add_track(test_track)
    panel.save('basic_test.png')

And this is the resulting image:

.. image:: ../images/basic_test.png

=========
The Panel
=========

The panel object is the "canvas" to which all the objects will be drawn.

*panel.fig* is the matplotlib Figure object

*panel.tracks* is the collector of all the tracks. It is a Python list object

*panel.save(filepath)* calling this method will draw all the tracks and features  to the panel.fig object, and will save the figure to the filepath passed

*panel.htmlmap* after panel.save(filepath) has been called the image htmlmap is accessible as this panel property if the specified format was png or jpg.


=======
Tracks
=======

Handling Tracks
_________________

Tracks can be seen as ordered collection of features.

For convenience *track.append()* and *track.extend* works as the common list methods.

Ordering features in track
___________________________

collapse (default)

order as they come = user defined

order by lenght

order by score



Color scales
_________________
 
colormaps

max and min

colorbars



=========
Features
=========


Simple features


Draw SeqFeatures
_________________

Generic

Gene

Segmented

Single position



Draw complex features
_______________________

mRNA and CDS

TM regions

Secondary structures

Domains

::

    from biograpy import Panel, tracks, features
    from Bio import SeqFeature

    panel = Panel(fig_width=900)

    test_track = tracks.BaseTrack(name = 'domains', sort_by = None, cm = 'Set3')

    feat = SeqFeature.SeqFeature()
    feat.location = SeqFeature.FeatureLocation(100, 300)

    dfeat = features.DomainFeature([feat], name = 'test domain 1', seq_line = (1, 766))
    test_track.append(dfeat)

    dfeat = features.DomainFeature([feat],name = 'test domain 1', height = 1.5, seq_line = (1, 766))
    test_track.append(dfeat)

    dfeat = features.DomainFeature([feat],name = 'test domain 1', height = 1.5, boxstyle = 'round4, rounding_size=1.4',  seq_line = (1, 766))
    test_track.append(dfeat)

    dfeat = features.DomainFeature([feat],name = 'test domain 1',height = 1.5, boxstyle = 'larrow, pad = 0',  seq_line = (1, 766))
    test_track.append(dfeat)

    dfeat = features.DomainFeature([feat], name = 'test domain 1',height = 1.5, boxstyle = 'round ',  seq_line = (1, 766))
    test_track.append(dfeat)

    feat2 = SeqFeature.SeqFeature()
    feat2.location = SeqFeature.FeatureLocation(500, 700)

    dfeat = features.DomainFeature([feat,feat2], name = 'test domain 1',height = 1.5, boxstyle = 'roundtooth, pad = 0.1, tooth_size=1.2',  seq_line = (1, 766), alpha = 0.7)
    test_track.append(dfeat)

    dfeat = features.DomainFeature([feat,feat2],name = ['test domain 1', 'test domain 2'], height = 1.5, boxstyle = ['sawtooth, tooth_size=1.4',  'rarrow, pad = 0.1'],  seq_line = (1, 766), ec = 'None')
    test_track.append(dfeat)

    dfeat = features.DomainFeature([feat,feat2],name = ['', 'test domain 2'],height = 1.5, boxstyle = ['round4, rounding_size=1.4',  'larrow, pad = 0.1'],   ec = 'None', fc = ['y', 'c'], color_by_cm = False)
    test_track.append(dfeat)

    panel.add_track(test_track)
    panel.save('domain_test.png')
	

resulting image:

.. image:: ../images/domain_test.png



Draw lineplots
________________

Plot feature requires plto track

=================
Draw a SeqRecord
=================

Starting from this_ annotated entry in EMBL format

.. _this: https://github.com/apierleoni/BioGraPy/blob/master/src/biograpy/tests/factor7.embl


Generate a plot
:: 

    from biograpy.seqrecord import SeqRecordDrawer
    from biograpy import Panel, tracks, features
    from Bio import SeqIO
    seqrecord = SeqIO.parse(open("factor7.embl"), "embl").next()    
    SeqRecordDrawer(seqrecord, fig_width=900).save("factor7.png")
    
.. image:: ../images/factor7.png

Check out the similar plot done with BioPerl here_.

.. _here: http://www.bioperl.org/wiki/HOWTO:Graphics#Rendering_Features_from_a_GenBank_or_EMBL_File


====================
Draw a Blast Output
====================
automatically draw a seqrecord



=================
Extending library
=================

Creating a custom GraphicFeature
_________________________________

TODO